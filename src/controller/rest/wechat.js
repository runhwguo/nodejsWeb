import crypto from 'crypto';
import * as wxPay from '../../tool/wx_pay';
import {session} from '../../tool/config';
import * as Dao from '../../tool/dao';
import {API_RETURN_TYPE} from '../../tool/rest';
import {toCDATA} from '../../tool/common';
import {Task, User, Bill} from '../../tool/model';
import tracer from 'tracer';
import Json2Xml from 'json2xml';


let console = tracer.console();

const TOKEN = 'FuckQ';

const REPLY_WORD = '‰∫≤Áà±ÁöÑÂ∞è‰ºô‰º¥ÔºåÊÑüË∞¢ÂÖ≥Ê≥®Ê†°Âõ≠ËµÑÊ∫êÂÖ±‰∫´‚ÄúÁöÑ‚ÄùÂπ≥Âè∞Ôºå‰ª£ÂèñÂø´ÈÄíÔºå‰ª£ÂÜô‰Ωú‰∏öÔºå‰ª£Âà∑Ê∏∏ÊàèÔºå‰ª£ËßÜÂê¨ËØ¥Ôºå‰ª£ËØæ‰ª£Ê¥ªÂä®ÔºåÊâæÈ°∫È£éËΩ¶‚Ä¶‰∏ÄÂàá‰∏çÊÉ≥ÂÅöÁöÑ‰∫ãÈÉΩÂèØ‰ª•ÊâîÂà∞Âπ≥Âè∞Êâæ‰∫∫‰ª£ÂÅö„ÄÇÈó≤ÁΩÆÁöÑ‰π¶ÔºåËá™Ë°åËΩ¶ÔºåË°£ÊúçÔºåÁîµÂô®ÔºåËøòÊúâËßÜÈ¢ëÁΩëÁ´ôÁöÑ‰ºöÂëòÈÉΩÂèØ‰ª•ÊîæÂà∞Âπ≥Âè∞‰∏äÊúâÂÅøÂÖ±‰∫´„ÄÇÈó≤Êù•Êó†‰∫ãÁöÑÂ∞è‰ºô‰º¥ÂèØ‰ª•Êé•ÂçïÈ¢Ü‰ªªÂä°ÔºåÂú®Ê†°ÂÜÖÂÅöÂÖºËÅå„ÄÇËØ¶ÊÉÖËØ∑ÁÇπÂáª‰∏ãÈù¢ÁöÑ‚ÄúËøõÂÖ•‰∏ªÈ°µ‚Äùüëá';

const checkIsFromWeChatServer = async ctx => {
  let signature = ctx.query.signature,
    timestamp = ctx.query.timestamp,
    nonce = ctx.query.nonce,
    echostr = ctx.query.echostr;

  let result = _isFromWechatServer(signature, timestamp, nonce);
  if (result) {
    let msg = ctx.request.body.xml;

    if (msg) {
      let msgType = msg.MsgType;
      if (msgType === 'event') {
        let event = msg.Event;
        if (event === 'subscribe') {
          result = _replyToWechat(REPLY_WORD, msg);

          ctx.rest(result, API_RETURN_TYPE.XML);
        } else {

        }
      } else if (msgType === 'text') {
        result = _replyToWechat(REPLY_WORD, msg);

        ctx.rest(result, API_RETURN_TYPE.XML);
      } else {
        result = _replyToWechat('ÂÖ¨‰ºóÂè∑ÁõÆÂâç‰∏çÊîØÊåÅÊ≠§Ê∂àÊÅØÁ±ªÂûã', msg);

        ctx.rest(result, API_RETURN_TYPE.XML);
      }
    } else {
      ctx.rest(echostr);
    }

  } else {
    ctx.rest('error');
  }
};

const _replyToWechat = (text, msg) => {
  let result = Json2Xml({
    xml: {
      ToUserName: toCDATA(msg.FromUserName),
      FromUserName: toCDATA(msg.ToUserName),
      CreateTime: toCDATA(Math.round(Date.now() / 1000)),
      MsgType: toCDATA('text'),
      Content: toCDATA(text)
    }
  });

  result = result.replace(/&lt;/g, '<').replace(/&gt;/g, '>');

  return result;
};

const _isFromWechatServer = async (signature, timestamp, nonce) => {
  let code = crypto.createHash('sha1').update([TOKEN, timestamp, nonce].sort().toString().replace(/,/g, ''), 'utf-8').digest('hex');

  return code === signature;
};

const orderNotify = async ctx => {
  let data = ctx.request.body.xml;
  let [isSuccessful, result] = wxPay.processNotifyCall(data);
  console.log('isSuccessful -> ' + isSuccessful);
  console.log('result.attach -> ' + result.attach);
  if (isSuccessful && data.attach) {
    // ‰ªòÊ¨æÊàêÂäüÔºåËøôÈáåÂèØ‰ª•Ê∑ªÂä†‰ºöÂëòÂÖ±‰∫´ÁöÑÊâìÈí±ÈÄªËæë
    let taskId = data.attach,
      task = await Task.findByPrimary(taskId),
      userId = task.dataValues.userId,
      reward = task.dataValues.reward;
    let user = await User.findByPrimary(userId, {
      attributes: ['openId']
    });
    let openId = user.dataValues.openId;
    let isOk = await Dao.create(Bill, {
      taskId: data.attach,
      userOpenId: openId,
      amount: reward
    });
    console.log('‰ºöÂëòÂÖ±‰∫´Êü•ÁúãË¥πÁî®Ë¥¶ÂçïÁîüÊàê -> ' + isOk);
  }

  console.log(data);
  console.log(result);

  ctx.rest(result);
};

const startPay = async ctx => {
  let openId = ctx.cookies.get(session.wxOpenId);
  let request = '';

  if (openId) {
    let prepay_id = await wxPay.unifiedOrder(ctx);
    if (!prepay_id) {
      console.error('Ëé∑Âèñprepay_idÂ§±Ë¥•');
    }
    request = await wxPay.getOnBridgeReadyRequest(prepay_id);
  }
  ctx.rest(request);
};

module.exports = {
  'GET /': checkIsFromWeChatServer,
  'POST /': checkIsFromWeChatServer,
  'POST /order/notify': orderNotify,
  'GET /pay/start': startPay
};